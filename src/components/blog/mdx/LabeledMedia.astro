---
export interface MediaOriginal {
	href: string;
	text: string;
}

export interface Props {
	description?: string | string[];
	note?: string | undefined;
	original?: string | MediaOriginal | undefined;
}

const descriptions =
	Astro.props.description === undefined ||
	Array.isArray(Astro.props.description)
		? Astro.props.description
		: [Astro.props.description];

const original =
	typeof Astro.props.original === "string"
		? { href: Astro.props.original, text: "original" }
		: Astro.props.original;
---

<label class="labeled-media-media">
	<slot />
	<small>
		{
			descriptions?.map((description) => (
				<span class="labeled-media-description">{description}</span>
			))
		}
		{
			original && (
				<div class="labeled-media-original">
					<a href={original.href} target="_blank">
						{original.text}
					</a>
				</div>
			)
		}
		{Astro.props.note && <em class="labeled-media-note">{Astro.props.note}</em>}
	</small>
</label>

<style is:inline>
	.labeled-media-media {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		text-align: center;
	}

	.labeled-media-note {
		display: block;
		font-size: 0.9em;
		padding-bottom: 1rem;
	}

	.labeled-media-original::after {
		content: "]";
	}

	.labeled-media-original::before {
		content: "[";
	}
</style>
