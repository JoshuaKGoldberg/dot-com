---
import type { ImageMetadata } from "astro";

import { Image } from "astro:assets";

import type { MediaOriginal } from "./MediaOriginalNote.astro";

import LabeledMedia from "./LabeledMedia.astro";

export interface Props {
	alt: string;
	description: string | string[];
	note?: string;
	original?: MediaOriginal | string;
	src: ImageMetadata;
	wide?: boolean;
}

const alt =
	Astro.props.alt ??
	(Array.isArray(Astro.props.description)
		? Astro.props.description.join(" ")
		: Astro.props.description);

// If I pass src.src (the actual string), Astro's build thinks it's a remote image and fails.
// Adding catch (error) { and console.log(error) to node_modules/astro/dist/assets/internal.js > getImage:
//   TypeError: Failed to parse URL from /_astro/me-laughing-on-stage-wide.abc123.webp
const src = Astro.props.src as unknown as string;
---

<LabeledMedia
	class="labeled-image-media"
	description={Astro.props.description}
	note={Astro.props.note}
	original={Astro.props.original}
>
	<Image
		alt={alt}
		class:list={["labeled-image", Astro.props.wide && "labeled-image-wide"]}
		inferSize
		src={src}
		style={{
			// Astro manually sets aspect-ratio, height, and width on the image.
			// With maximum widths and heights, that overrides the aspect-ratio,
			// resulting in stretched images. ðŸ˜¬
			height: "auto !important",
			width: "auto !important",
		}}
	/>
</LabeledMedia>

<style is:inline>
	.labeled-image {
		max-height: 25rem;
	}

	.labeled-image:not(.labeled-image-wide) {
		max-width: min(100%, 37.5rem);
	}

	.labeled-image.labeled-image-wide {
		max-width: 100%;
	}
</style>
